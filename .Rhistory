mutate(Estimador = nomes) %>%
dyplr::select(Estimador, everything())
tabela <- confint(fit_depressao_intera, level=0.95) %>%
as_tibble() %>%
mutate(Estimador = nomes) %>%
dplyr::select(Estimador, everything())
bind_rows(
## Perform the normal Shapiro-Wilk test for the residuals
shapiro.test(residuals(fit_depressao_intera)) %>% tidy(),
## Perform breush-pagan test for hetereocedascity
(bptest(fit_depressao_intera) %>% tidy())[, c(1, 2, 4)],
## Perform Durbin-Watson test for Independence
(durbinWatsonTest(fit_depressao_intera) %>% tidy())[,c(1, 2, 4)]
) %>%
dplyr::select(method, everything()) %>%
knitr::kable(
format = "latex",
align = c("lcc"),
booktabs = TRUE,
longtable = TRUE,
linesep = "",
escape = FALSE,
digits = 3,
col.names = c("Teste","Estatística de teste","p-valor"),
caption = "Testes de hipótese para normalidade, heteroscedasticidade e independência."
) %>%
kableExtra::kable_styling(
position = "center",
latex_options = c("striped", "repeat_header"),
stripe_color = "gray!15")
## Outliers nos resíduos
summary(rstandard(modelo_reg_multi)) #não tem valores fugindo de -3 e +3, então não tem outliers
if(!("pacman" %in% installed.packages())){install.packages("pacman")}
pacman::p_load(tidyverse, tidymodels, kableExtra, corrplot, plotrix, lmtest, psych, car, phia, cowplot, MASS, corrplot)
#Lendo e fazendo uma primeira observação das variáveis
dados_qualidade_vinho <- read.table("dados lista 2/Q01_data.txt", header=T)
head(dados_qualidade_vinho)%>%
knitr::kable(
format = "latex",
align = c("c"),
booktabs = TRUE,
longtable = TRUE,
linesep = "",
escape = FALSE,
digits = 2
) %>%
kableExtra::kable_styling(
position = "center",
latex_options = c("striped", "repeat_header"),
stripe_color = "gray!15")
# Resumo estatístico dos dados
#
# summary(dados_qualidade_vinho[, 1:6])%>%
#   knitr::kable(
#     format = "latex",
#     align = c("c"),
#     booktabs = TRUE,
#     longtable = TRUE,
#     linesep = "",
#     escape = FALSE,
#     digits = 2
#     ) %>%
#   kableExtra::kable_styling(
#       position = "center",
#       latex_options = c("striped", "repeat_header"),
#       stripe_color = "gray!15")
#
#
#
# summary(dados_qualidade_vinho[, 7:11])%>%
#   knitr::kable(
#     format = "latex",
#     align = c("c"),
#     booktabs = TRUE,
#     longtable = TRUE,
#     linesep = "",
#     escape = FALSE,
#     digits = 2
#     ) %>%
#   kableExtra::kable_styling(
#       position = "center",
#       latex_options = c("striped", "repeat_header"),
#       stripe_color = "gray!15")
#Analisando as possíveis correlações entre as variáveis
#Correlação
cor <- cor(dados_qualidade_vinho)
##Visualização da correlação
corrplot::corrplot(cor, method = "color",
type = "full",
order = "hclust",
addCoef.col = "black",
tl.srt = 50,
diag = T,
number.cex = 0.7)
#Analisando as possíveis correlações entre as variáveis
pairs(dados_qualidade_vinho, col= "navy", gap=0.2, pch = 19)
modelo_reg_multi <- lm(y~., data=dados_qualidade_vinho)
summary(modelo_reg_multi) %>%
tidy()
summary(rstandard(modelo_reg_multi))
## Analisando a ausência de Multicolinearidade no modelo
pairs.panels(dados_qualidade_vinho, gap=0.2) #Multicolinearidade se r > 0.9 ou 0.8
# modelo ajustado sem x7 e x10
modelo_reg_multi2 <- lm(y~x1+x2+x3+x4+x5+x6+x8+x9, data=dados_qualidade_vinho)
summary(modelo_reg_multi2)
#multicolinearidade
vif(modelo_reg_multi2) # Multicolinearidade se VIF > 10 (severa) e > 5 (moderada)
vif(modelo_final) %>% #não há mais multicolinearidade
tidy()
vif(modelo_final) %>% #não há mais multicolinearidade
tidy()
vif(modelo_final) %>% #não há mais multicolinearidade
as_tibble()
vif(modelo_final)
# modelo ajustado sem x7 e x10
modelo_reg_multi2 <- lm(y~x1+x2+x3+x5+x6+x8+x9, data=dados_qualidade_vinho)
#multicolinearidade
vif(modelo_reg_multi2) %>% tidy()
modelo_stepwise <- stepAIC(modelo_reg_multi2, direction = "both")
##seleciona o melhor modelo como y ~ x1 + x2 + x3 + x9
modelo_final <- lm(y~ x1 + x2 + x3 + x9, data=dados_qualidade_vinho)
summary(modelo_final)
anova(modelo_final)%>%
tidy()
summary(modelo_final)%>%
tidy()
?stepAIC
modelo_final <- lm(y~ x2 + x3 + x9, data=dados_qualidade_vinho)
anova(modelo_final)%>%
tidy()
anova(modelo_final)%>%
tidy()
summary(modelo_final)%>%
tidy()
modelo_final <- lm(y~ x2 + x9, data=dados_qualidade_vinho)
summary(modelo_final)%>%
tidy() %>%
knitr::kable(
format = "latex",
align = c("lcccc"),
booktabs = TRUE,
longtable = TRUE,
linesep = "",
escape = FALSE,
digits = 3,
col.names = c("Coeficiente","Estimativa", "EP" , "Estatística t", "p-valor"),
caption = "Modelo de regressão linear com x2 e x9"
) %>%
kableExtra::kable_styling(
position = "center",
latex_options = c("striped", "repeat_header"),
stripe_color = "gray!15")
anova(modelo_final)%>%
tidy() %>%
knitr::kable(
format = "latex",
align = c("lcccc"),
booktabs = TRUE,
longtable = TRUE,
linesep = "",
escape = FALSE,
digits = 3,
col.names = c("Fonte de Var.","g.l.", "SQ" , "QM", "F", "p-valor"),
caption = "Tabela ANOVA para o modelo linear com x2 e x9"
) %>%
kableExtra::kable_styling(
position = "center",
latex_options = c("striped", "repeat_header"),
stripe_color = "gray!15")
plot(modelo_final)
plot(modelo_final)
## Outliers nos resíduos
summary(rstandard(modelo_final)) %>% tidy() #não tem valores fugindo de -3 e +3, então não tem outliers
install.packages("texlive")
if(!("pacman" %in% installed.packages())){install.packages("pacman")}
pacman::p_load(tidyverse, tidymodels, kableExtra, corrplot, plotrix, lmtest, psych, car, phia, cowplot, MASS, corrplot)
if(!("pacman" %in% installed.packages())){install.packages("pacman")}
pacman::p_load(tidyverse, tidymodels, kableExtra, corrplot, plotrix, lmtest, psych, car, phia, cowplot, MASS, corrplot)
tinytex::install_tinytex()
if(!("pacman" %in% installed.packages())){install.packages("pacman")}
pacman::p_load(tidyverse, tidymodels, kableExtra, corrplot, plotrix, lmtest, psych, car, phia, cowplot, MASS, corrplot)
tinytex::tlmgr_search('setspace.sty')
tinytex::use_tinytex()
tinytex::tlmgr_install()
tinytex::install_tinytex()
tinytex::tlmgr_install()
tinytex::tlmgr_install()
tinytex::tlmgr_install?
?tinytex::tlmgr_install
tinytex::tlmgr_search()
tinytex::tlmgr_install()
tinytex::install_tinytex()
?glmer
??glmer
if(!("pacman" %in% installed.packages())){install.packages("pacman")}
pacman::p_load(tidyverse, tidymodels, kableExtra, lme4)
# Carregue a biblioteca
library(haven)
# Substitua "seuarquivo.sav" pelo caminho do seu arquivo .sav
dados_spss <- read_sav("C:/Users/cesar/Downloads/thaieduc.sav")
# Visualize os primeiros registros do conjunto de dados
head(dados_spss)
install.packages("geobr")
asdf <- geobr::read_health_facilities()
View(asdf)
install.packages("microdatasus")
if(!("pacman" %in% installed.packages())){install.packages("pacman")}
pacman::p_load(tidyverse, tidymodels, kableExtra, lme4)
## step 3 - adicionando a variável explicativa de nível superior com a variável correlacionada
modelo_efeitos_aleatorios <- glmer(REPEAT ~ SEX + PPED + (1 + MSESC | SCHOOLID),
data = dados_spss,
family = binomial)
# Carregue a biblioteca
library(haven)
# Lendo os dados
dados_spss <- read_sav("thaieduc.sav")
#head(dados_spss)
# Contando o número de NAs em cada variável do dados
quantidade_nas <- colSums(is.na(dados_spss)) #variáeis com Nas
quantidade_nas <- data.frame(numero_de_NAs = quantidade_nas)
#print(quantidade_nas)
#Nota-se que há muitos NAs em MSESC
#print(quantidade_nas/nrow(dados_spss)) #12,42%
# linhas onde MSESC é NA
#linhas_na <- which(is.na(dados_spss$MSESC))
# conjunto de dados com apenas as linhas com NA em MSESC
dados_na <- subset(dados_spss, is.na(MSESC))
#nrow(dados_na)
# Extraindo as SCHOOLID das linhas com NA em MSESC
escolas_com_na <- unique(dados_na$SCHOOLID)
# quantidade de escolas com NA em MSESC
#print(length(escolas_com_na))
# quantas vezes cada escola repete seu ID
contagem_escolas <- table(dados_spss$SCHOOLID)
# Quantidade total de escolas
#print(length(contagem_escolas)) #de 441 escolas, 55 precisaram ser retiradas, pois continhas MSESC NAs
# Retirando as NAs
dados_spss <- na.omit(dados_spss)
############################## Analisando os dados ################################
# Calcula a matriz de correlação
cor_matrix <- cor(dados_spss[,])
library(corrplot)
corrplot(cor_matrix, method = "circle", type = "lower", order = "hclust", tl.col = "black")
#Modelos de Regressão Logística Multinível
library(Matrix)
library(lme4)
library(lmtest)
## step1 - modelo de intercepto apenas (também conhecido como modelo nulo)
modelo_intercepto <- glmer(REPEAT ~ 1 + (1 | SCHOOLID), data = dados_spss,
family = binomial)
summary(modelo_intercepto)
## step 3 - adicionando a variável explicativa de nível superior com a variável correlacionada
modelo_efeitos_aleatorios <- glmer(REPEAT ~ SEX + PPED + (1 + MSESC | SCHOOLID),
data = dados_spss,
family = binomial)
summary(modelo_efeitos_aleatorios)
plot(resid(modelo_efeitos_aleatorios), fitted(modelo_efeitos_aleatorios))
plot(modelo_efeitos_aleatorios, which = 3)
plot(modelo_efeitos_aleatorios)
cooks.distance(modelo_efeitos_aleatorios)
dfbetas(modelo_efeitos_aleatorios)
if(!("pacman" %in% installed.packages())){install.packages("pacman")}
pacman::p_load(tidyverse, tidymodels, kableExtra, lme4)
# Carregue a biblioteca
library(haven)
# Lendo os dados
dados_spss <- read_sav("thaieduc.sav")
#head(dados_spss)
# Contando o número de NAs em cada variável do dados
quantidade_nas <- colSums(is.na(dados_spss)) #variáeis com Nas
quantidade_nas <- data.frame(numero_de_NAs = quantidade_nas)
#print(quantidade_nas)
#Nota-se que há muitos NAs em MSESC
#print(quantidade_nas/nrow(dados_spss)) #12,42%
# linhas onde MSESC é NA
#linhas_na <- which(is.na(dados_spss$MSESC))
# conjunto de dados com apenas as linhas com NA em MSESC
dados_na <- subset(dados_spss, is.na(MSESC))
#nrow(dados_na)
# Extraindo as SCHOOLID das linhas com NA em MSESC
escolas_com_na <- unique(dados_na$SCHOOLID)
# quantidade de escolas com NA em MSESC
#print(length(escolas_com_na))
# quantas vezes cada escola repete seu ID
contagem_escolas <- table(dados_spss$SCHOOLID)
# Quantidade total de escolas
#print(length(contagem_escolas)) #de 441 escolas, 55 precisaram ser retiradas, pois continhas MSESC NAs
# Retirando as NAs
dados_spss <- na.omit(dados_spss)
############################## Analisando os dados ################################
# Calcula a matriz de correlação
cor_matrix <- cor(dados_spss[,])
library(corrplot)
corrplot(cor_matrix, method = "circle", type = "lower", order = "hclust", tl.col = "black")
#Modelos de Regressão Logística Multinível
library(Matrix)
library(lme4)
library(lmtest)
## step1 - modelo de intercepto apenas (também conhecido como modelo nulo)
modelo_intercepto <- glmer(REPEAT ~ 1 + (1 | SCHOOLID), data = dados_spss,
family = binomial)
summary(modelo_intercepto)
## step 2 - modelo de efeitos fixos - todas as variáveis explicativas de nível inferior são fixas
modelo_efeitos_fixos <- glmer(REPEAT ~ SEX + PPED + (1 | SCHOOLID),
data = dados_spss,
family = binomial)
summary(modelo_efeitos_fixos)
## step 3 - adicionando a variável explicativa de nível superior com a variável correlacionada
modelo_efeitos_aleatorios <- glmer(REPEAT ~ SEX + PPED + (1 + MSESC | SCHOOLID),
data = dados_spss,
family = binomial)
summary(modelo_efeitos_aleatorios)
ranef(modelo_efeitos_aleatorios)$SCHOOLID
modelo_efeitos_aleatorios
coef(modelo_efeitos_aleatorios)$SCHOOLID
ranef(modelo_efeitos_aleatorios)$SCHOOLID %>% head(5)
coef(modelo_efeitos_aleatorios)$SCHOOLID %>% head(5)
install.packages("mixedup")
mixedup::extract_random_effects(modelo_efeitos_aleatorios)
install.packages("merTools")
#mixedup::extract_random_effects(modelo_efeitos_aleatorios)
plotREsim(REsim(modelo_efeitos_aleatorios))
#mixedup::extract_random_effects(modelo_efeitos_aleatorios)
merTools::plotREsim(REsim(modelo_efeitos_aleatorios))
REsim(modelo_efeitos_aleatorios)
?REsim
#mixedup::extract_random_effects(modelo_efeitos_aleatorios)
merTools::plotREsim(merTools::REsim(modelo_efeitos_aleatorios))
predict(modelo_efeitos_aleatorios, re.form=NA) %>% head()
predict(modelo_efeitos_aleatorios, re.form=NA) %>% head()
predict(modelo_efeitos_aleatorios) %>% head()
predict(modelo_efeitos_aleatorios, re.form=NA) %>% head() %>% e^(.)
predict(modelo_efeitos_aleatorios, re.form=NA) %>% head() %>% exp()
predict(modelo_efeitos_aleatorios) %>% head() %>% exp()
predict(modelo_efeitos_aleatorios, re.form=NA) %>% head() %>% exp() %>% plot()
predict(modelo_efeitos_aleatorios) %>% head() %>% exp() %>% plot()
predict(modelo_efeitos_aleatorios, re.form=NA)%>% exp() %>% plot()
predict(modelo_efeitos_aleatorios) %>% head() %>% exp() %>% plot()
predict(modelo_efeitos_aleatorios) %>% exp() %>% plot()
predict(modelo_efeitos_aleatorios, re.form=NA)%>% exp() %>% plot()
predict(modelo_efeitos_aleatorios) %>% exp() %>% plot()
predict(modelo_efeitos_aleatorios, re.form=NA)%>% exp() %>% plot()
predict(modelo_efeitos_aleatorios) %>% exp() %>% plot()
predict(modelo_efeitos_aleatorios) %>% exp()
predict(modelo_efeitos_aleatorios) %>% exp() %>% plot()
predict(modelo_efeitos_aleatorios) %>% plot()
predict(modelo_efeitos_aleatorios) %>% sort()
predict(modelo_efeitos_aleatorios) %>% exp() %>% sort()
predict(modelo_efeitos_aleatorios) %>% exp() %>% sort() %>% tail()
predict(modelo_efeitos_aleatorios) %>% exp() %>% sort() %>% plot()
predict(modelo_efeitos_aleatorios, re.form=NA)%>% exp() %>% plot()
predict(modelo_efeitos_aleatorios)%>% sort() %>% plot()
predict(modelo_efeitos_aleatorios, re.form=NA) %>% plot()
predict(modelo_efeitos_aleatorios)%>% sort() %>% plot()
predict(modelo_efeitos_aleatorios)%>% exp() %>% sort() %>% plot()
?predict
predict(modelo_efeitos_aleatorios, re.form=NA) %>% exp(.)/(1+exp(.)) %>% plot()
predict(modelo_efeitos_aleatorios, re.form=NA) %>% exp()/(1+exp())
logit_trans()
predict(modelo_efeitos_aleatorios, re.form=NA) %>% logit_trans() %>% plot()
logit <- function(x){1/(1+exp(-x))}
predict(modelo_efeitos_aleatorios, re.form=NA) %>% logit() %>% plot()
predict(modelo_efeitos_aleatorios)%>% logit() %>% sort() %>% plot()
predict(modelo_efeitos_aleatorios, re.form=NA) %>% logit() %>% sort() %>% plot()
ranef(modelo_efeitos_aleatorios)$SCHOOLID %>% plot()
ranef(modelo_efeitos_aleatorios)$SCHOOLID %>% plot()
ranef(modelo_efeitos_aleatorios)$SCHOOLID
coef(modelo_efeitos_aleatorios)$SCHOOLID %>% plot()
install.packages("sjPlot")
library(sjPlot)
sjp.glmer(modelo_efeitos_aleatorios)
sjPlot::sjp.glmer(modelo_efeitos_aleatorios)
sjPlot::plot_model(modelo_efeitos_aleatorios)
sjPlot::plot_model(modelo_efeitos_aleatorios, type = "fe")
?sjPlot::plot_model()
sjPlot::plot_model(modelo_efeitos_aleatorios, type = "pred")
sjPlot::plot_model(modelo_efeitos_aleatorios, type = "diag")
install.packages("glmmTMB")
sjPlot::plot_model(modelo_efeitos_aleatorios, type = "diag")
sjPlot::plot_model(modelo_efeitos_aleatorios, type = "est")
sjPlot::plot_model(modelo_efeitos_aleatorios, type = "re")
sjPlot::plot_model(modelo_efeitos_aleatorios, type = "eff")
sjPlot::plot_model(modelo_efeitos_aleatorios, type = "emm")
sjPlot::plot_model(modelo_efeitos_aleatorios, type = "pred")
## step 3 - adicionando a variável explicativa de nível superior com a variável correlacionada
modelo_efeitos_aleatorios <- glmer(REPEAT ~ SEX + PPED + (1 +  SEX + PPED +MSESC | SCHOOLID),
data = dados_spss,
family = binomial)
summary(modelo_efeitos_aleatorios)
# logit <- function(x){1/(1+exp(-x))}
# predict(modelo_efeitos_aleatorios, re.form=NA) %>% logit() %>% sort() %>% plot()
# predict(modelo_efeitos_aleatorios)%>% logit() %>% sort() %>% plot()
#
sjPlot::plot_model(modelo_efeitos_aleatorios, type = "pred")
mixedup::extract_random_effects(modelo_efeitos_aleatorios)
# mixedup::extract_random_effects(modelo_efeitos_aleatorios)
merTools::plotREsim(merTools::REsim(modelo_efeitos_aleatorios))
library(plotly)
install.packages("plotly")
dados_spss %>%
modelr::add_predictions(modelo_efeitos_aleatorios, var = 'mixed') %>%
group_by(SCHOOLID) %>%
plot_ly %>%
add_lines(
x =  ~ MSESC,
y =  ~ mixed,
opacity = .2,
color = I('#00aaff'),
size = I(1),
name = 'Mixed\nModel'
) %>%
layout(yaxis = list(title = 'gpa')) %>%
theme_plotly()
library(plotly)
dados_spss %>%
modelr::add_predictions(modelo_efeitos_aleatorios, var = 'mixed') %>%
group_by(SCHOOLID) %>%
plot_ly %>%
add_lines(
x =  ~ MSESC,
y =  ~ mixed,
opacity = .2,
color = I('#00aaff'),
size = I(1),
name = 'Mixed\nModel'
) %>%
layout(yaxis = list(title = 'gpa')) %>%
theme_plotly()
library(ggplot2)
dados_spss %>%
modelr::add_predictions(modelo_efeitos_aleatorios, var = 'mixed') %>%
group_by(SCHOOLID) %>%
plot_ly %>%
add_lines(
x =  ~ MSESC,
y =  ~ mixed,
opacity = .2,
color = I('#00aaff'),
size = I(1),
name = 'Mixed\nModel'
) %>%
layout(yaxis = list(title = 'gpa')) %>%
theme_plotly()
?theme_plotly
??theme_plotly
dados_spss %>%
modelr::add_predictions(modelo_efeitos_aleatorios, var = 'mixed') %>%
group_by(SCHOOLID) %>%
plot_ly %>%
add_lines(
x =  ~ MSESC,
y =  ~ mixed,
opacity = .2,
color = I('#00aaff'),
size = I(1),
name = 'Mixed\nModel'
) %>%
layout(yaxis = list(title = 'gpa'))
dados_spss %>%
modelr::add_predictions(modelo_efeitos_aleatorios, var = 'mixed') %>%
group_by(SCHOOLID) %>%
plot_ly %>%
add_lines(
x =  ~ MSESC,
y =  ~ mixed,
opacity = .2,
color = I('#00aaff'),
size = I(1),
name = 'Mixed\nModel'
)
dados_spss %>%
modelr::add_predictions(modelo_efeitos_aleatorios, var = 'mixed') %>%
group_by(SCHOOLID) %>%
plot_ly %>%
add_lines(
x =  ~ MSESC,
y =  ~ REPEAT,
opacity = .2,
color = I('#00aaff'),
size = I(1),
name = 'Mixed\nModel'
)
dados_spss %>%
modelr::add_predictions(modelo_efeitos_aleatorios, var = 'mixed') %>%
group_by(SCHOOLID) %>%
plot_ly %>%
add_lines(
x =  ~ MSESC,
y =  ~ REPEAT,
opacity = .2,
color = I('#00aaff'),
size = I(1),
name = 'Mixed\nModel'
)
dados_spss %>%
modelr::add_predictions(modelo_efeitos_aleatorios, var = 'mixed') %>%
group_by(SCHOOLID) %>%
plot_ly %>%
add_lines(
x =  ~ REPEAT,
y =  ~ MSESC,
opacity = .2,
color = I('#00aaff'),
size = I(1),
name = 'Mixed\nModel'
)
summarize_model(modelo_efeitos_aleatorios)
??summarize_model
install.packages("ushr")
library(ushr)
ummarize_model(modelo_efeitos_aleatorios)
summarize_model(modelo_efeitos_aleatorios)
